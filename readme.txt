PA3 - Parser - Ethan Fox and Ben Secor

Overall, this project required paying close attention to the COOL docs and the correct way to parse COOL token files overall. The bulk of the difficulties for this project lay in making sure these specifications were matched exactly in our Python code. After writing code to read in the .cl-lex files and gathering the tokens and their lexemes, the first task was to define many functions for the parser generator to be able to use. These functions followed the same basic format as the ones outlined in the YACC docs for grabbing the correct tokens out of a feature or expression. The best strategy for this part of the project was to read the COOL syntax docs closely for when there were optional parts of the expression for example, which would require an extra function. Other than that, writing these functions was a matter of making sure we captured all of the possibilities and making sure the correct output was getting passed along.

One part we paid special attention to was handling "let." For that we #TALK HERE ABOUT OUR STRATEGY FOR LET

The next part of the project was to create all of the print functions to actually write things to the output file. These closely followed the specifications of the PA3 web page where the correct print output is noted for many different conditions. We dealt with many errors during this stage of writing code and testing, but most were fixed by paying closer attention to the requirements and looking at error output in comparison to correctly parsed files.

As for our test files good.cl and bad.cl these are meant to showcase many of COOL's feature in the case of good.cl, and throw a parse error in the case of bad.cl. For the good.cl file, this COOL program that we wrote sets up a Test class and a Main class, which both inherit from IO. The Test class has four methods, each meant to test different features of the language. The first method simply takes an Int and returns a Bool testing whether a number is even. The next method showcases "let" and many of the operators or tokens that can be used on Ints. The third method returns an Object and uses many string methods as well as some dispatching to test whether this can be done correctly. The final method of the Test class is another simple one, this time a recursive factorial method to test <= as well as that recursion works/parses correctly. Then, in the Main class and main method, these Test class methods are tested on an instance of a Test object showcasing object oriented features of COOL as well as more "let" cases and out_string and out_int. In the main method there is also a dynamic dispatch test case. We believe this good.cl program tests a wide range of COOL features, and includes many of the ones we had bugs with initially. For the bad.cl file we chose to showcase an error we initially had issues with, that being "less than" associativity. "12 < 12 < 13" should not parse but originally it parsed for us, so we fixed that bug. In addition, the bad.cl tests the empty case example by including "case esac."