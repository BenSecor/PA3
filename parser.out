Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> classlist
Rule 2     classlist -> <empty>
Rule 3     classlist -> class SEMI classlist
Rule 4     class -> CLASS type LBRACE featurelist RBRACE
Rule 5     class -> CLASS type INHERITS type LBRACE featurelist RBRACE
Rule 6     type -> TYPE
Rule 7     identifier -> IDENTIFIER
Rule 8     featurelist -> <empty>
Rule 9     featurelist -> feature SEMI featurelist
Rule 10    feature -> identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE
Rule 11    feature -> identifier LPAREN RPAREN COLON type LBRACE exp RBRACE
Rule 12    feature -> identifier COLON type
Rule 13    feature -> identifier COLON type LARROW exp
Rule 14    formals -> formal
Rule 15    formals -> formal COMMA formals
Rule 16    formals -> <empty>
Rule 17    formal -> identifier COLON type
Rule 18    exp -> exp PLUS exp
Rule 19    exp -> exp MINUS exp
Rule 20    exp -> exp TIMES exp
Rule 21    exp -> exp DIVIDE exp
Rule 22    exp -> TILDE exp
Rule 23    exp -> exp LT exp
Rule 24    exp -> exp LE exp
Rule 25    exp -> exp EQUALS exp
Rule 26    exp -> NOT exp
Rule 27    exp -> LPAREN exp RPAREN
Rule 28    exp -> INTEGER
Rule 29    exp -> STRING
Rule 30    exp -> TRUE
Rule 31    exp -> FALSE
Rule 32    exp -> ISVOID exp
Rule 33    exp -> NEW type
Rule 34    exp -> identifier LARROW exp
Rule 35    exp -> identifier LPAREN exp_list RPAREN
Rule 36    exp -> identifier LPAREN RPAREN
Rule 37    exp -> exp AT type DOT identifier LPAREN exp_list RPAREN
Rule 38    exp -> exp AT type DOT identifier LPAREN RPAREN
Rule 39    exp -> exp DOT identifier LPAREN exp_list RPAREN
Rule 40    exp -> exp DOT identifier LPAREN RPAREN
Rule 41    exp -> IF exp THEN exp ELSE exp FI
Rule 42    exp -> WHILE exp LOOP exp POOL
Rule 43    exp -> LBRACE exp_list_semi RBRACE
Rule 44    exp -> LET let_list IN exp
Rule 45    let_list -> identifier COLON type
Rule 46    let_list -> identifier COLON type LARROW exp
Rule 47    let_list -> identifier COLON type COMMA let_list
Rule 48    let_list -> identifier COLON type LARROW exp COMMA let_list
Rule 49    exp -> CASE exp OF case_list ESAC
Rule 50    case_list -> identifier COLON type RARROW exp SEMI
Rule 51    case_list -> identifier COLON type RARROW exp SEMI case_list
Rule 52    exp_list -> exp
Rule 53    exp_list -> exp COMMA exp_list
Rule 54    exp_list_semi -> exp SEMI
Rule 55    exp_list_semi -> exp SEMI exp_list_semi
Rule 56    exp -> identifier

Terminals, with rules where they appear

AT                   : 37 38
CASE                 : 49
CLASS                : 4 5
COLON                : 10 11 12 13 17 45 46 47 48 50 51
COMMA                : 15 47 48 53
DIVIDE               : 21
DOT                  : 37 38 39 40
ELSE                 : 41
EQUALS               : 25
ESAC                 : 49
FALSE                : 31
FI                   : 41
IDENTIFIER           : 7
IF                   : 41
IN                   : 44
INHERITS             : 5
INTEGER              : 28
ISVOID               : 32
LARROW               : 13 34 46 48
LBRACE               : 4 5 10 11 43
LE                   : 24
LET                  : 44
LOOP                 : 42
LPAREN               : 10 11 27 35 36 37 38 39 40
LT                   : 23
MINUS                : 19
NEW                  : 33
NOT                  : 26
OF                   : 49
PLUS                 : 18
POOL                 : 42
RARROW               : 50 51
RBRACE               : 4 5 10 11 43
RPAREN               : 10 11 27 35 36 37 38 39 40
SEMI                 : 3 9 50 51 54 55
STRING               : 29
THEN                 : 41
TILDE                : 22
TIMES                : 20
TRUE                 : 30
TYPE                 : 6
WHILE                : 42
error                : 

Nonterminals, with rules where they appear

case_list            : 49 51
class                : 3
classlist            : 1 3
exp                  : 10 11 13 18 18 19 19 20 20 21 21 22 23 23 24 24 25 25 26 27 32 34 37 38 39 40 41 41 41 42 42 44 46 48 49 50 51 52 53 54 55
exp_list             : 35 37 39 53
exp_list_semi        : 43 55
feature              : 9
featurelist          : 4 5 9
formal               : 14 15
formals              : 10 15
identifier           : 10 11 12 13 17 34 35 36 37 38 39 40 45 46 47 48 50 51 56
let_list             : 44 47 48
program              : 0
type                 : 4 5 5 10 11 12 13 17 33 37 38 45 46 47 48 50 51

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classlist
    (2) classlist -> .
    (3) classlist -> . class SEMI classlist
    (4) class -> . CLASS type LBRACE featurelist RBRACE
    (5) class -> . CLASS type INHERITS type LBRACE featurelist RBRACE

    $end            reduce using rule 2 (classlist -> .)
    CLASS           shift and go to state 4

    program                        shift and go to state 1
    classlist                      shift and go to state 2
    class                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> classlist .

    $end            reduce using rule 1 (program -> classlist .)


state 3

    (3) classlist -> class . SEMI classlist

    SEMI            shift and go to state 5


state 4

    (4) class -> CLASS . type LBRACE featurelist RBRACE
    (5) class -> CLASS . type INHERITS type LBRACE featurelist RBRACE
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 6

state 5

    (3) classlist -> class SEMI . classlist
    (2) classlist -> .
    (3) classlist -> . class SEMI classlist
    (4) class -> . CLASS type LBRACE featurelist RBRACE
    (5) class -> . CLASS type INHERITS type LBRACE featurelist RBRACE

    $end            reduce using rule 2 (classlist -> .)
    CLASS           shift and go to state 4

    class                          shift and go to state 3
    classlist                      shift and go to state 8

state 6

    (4) class -> CLASS type . LBRACE featurelist RBRACE
    (5) class -> CLASS type . INHERITS type LBRACE featurelist RBRACE

    LBRACE          shift and go to state 9
    INHERITS        shift and go to state 10


state 7

    (6) type -> TYPE .

    LBRACE          reduce using rule 6 (type -> TYPE .)
    INHERITS        reduce using rule 6 (type -> TYPE .)
    LARROW          reduce using rule 6 (type -> TYPE .)
    SEMI            reduce using rule 6 (type -> TYPE .)
    COMMA           reduce using rule 6 (type -> TYPE .)
    RPAREN          reduce using rule 6 (type -> TYPE .)
    PLUS            reduce using rule 6 (type -> TYPE .)
    MINUS           reduce using rule 6 (type -> TYPE .)
    TIMES           reduce using rule 6 (type -> TYPE .)
    DIVIDE          reduce using rule 6 (type -> TYPE .)
    LT              reduce using rule 6 (type -> TYPE .)
    LE              reduce using rule 6 (type -> TYPE .)
    EQUALS          reduce using rule 6 (type -> TYPE .)
    AT              reduce using rule 6 (type -> TYPE .)
    DOT             reduce using rule 6 (type -> TYPE .)
    THEN            reduce using rule 6 (type -> TYPE .)
    LOOP            reduce using rule 6 (type -> TYPE .)
    OF              reduce using rule 6 (type -> TYPE .)
    RBRACE          reduce using rule 6 (type -> TYPE .)
    ELSE            reduce using rule 6 (type -> TYPE .)
    POOL            reduce using rule 6 (type -> TYPE .)
    FI              reduce using rule 6 (type -> TYPE .)
    IN              reduce using rule 6 (type -> TYPE .)
    RARROW          reduce using rule 6 (type -> TYPE .)


state 8

    (3) classlist -> class SEMI classlist .

    $end            reduce using rule 3 (classlist -> class SEMI classlist .)


state 9

    (4) class -> CLASS type LBRACE . featurelist RBRACE
    (8) featurelist -> .
    (9) featurelist -> . feature SEMI featurelist
    (10) feature -> . identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE exp RBRACE
    (12) feature -> . identifier COLON type
    (13) feature -> . identifier COLON type LARROW exp
    (7) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 8 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    featurelist                    shift and go to state 11
    feature                        shift and go to state 12
    identifier                     shift and go to state 13

state 10

    (5) class -> CLASS type INHERITS . type LBRACE featurelist RBRACE
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 15

state 11

    (4) class -> CLASS type LBRACE featurelist . RBRACE

    RBRACE          shift and go to state 16


state 12

    (9) featurelist -> feature . SEMI featurelist

    SEMI            shift and go to state 17


state 13

    (10) feature -> identifier . LPAREN formals RPAREN COLON type LBRACE exp RBRACE
    (11) feature -> identifier . LPAREN RPAREN COLON type LBRACE exp RBRACE
    (12) feature -> identifier . COLON type
    (13) feature -> identifier . COLON type LARROW exp

    LPAREN          shift and go to state 18
    COLON           shift and go to state 19


state 14

    (7) identifier -> IDENTIFIER .

    LPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 7 (identifier -> IDENTIFIER .)
    LARROW          reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 7 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (identifier -> IDENTIFIER .)
    LT              reduce using rule 7 (identifier -> IDENTIFIER .)
    LE              reduce using rule 7 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (identifier -> IDENTIFIER .)
    AT              reduce using rule 7 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 7 (identifier -> IDENTIFIER .)
    SEMI            reduce using rule 7 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 7 (identifier -> IDENTIFIER .)
    LOOP            reduce using rule 7 (identifier -> IDENTIFIER .)
    OF              reduce using rule 7 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 7 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 7 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 7 (identifier -> IDENTIFIER .)
    POOL            reduce using rule 7 (identifier -> IDENTIFIER .)
    FI              reduce using rule 7 (identifier -> IDENTIFIER .)
    IN              reduce using rule 7 (identifier -> IDENTIFIER .)


state 15

    (5) class -> CLASS type INHERITS type . LBRACE featurelist RBRACE

    LBRACE          shift and go to state 20


state 16

    (4) class -> CLASS type LBRACE featurelist RBRACE .

    SEMI            reduce using rule 4 (class -> CLASS type LBRACE featurelist RBRACE .)


state 17

    (9) featurelist -> feature SEMI . featurelist
    (8) featurelist -> .
    (9) featurelist -> . feature SEMI featurelist
    (10) feature -> . identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE exp RBRACE
    (12) feature -> . identifier COLON type
    (13) feature -> . identifier COLON type LARROW exp
    (7) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 8 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    feature                        shift and go to state 12
    featurelist                    shift and go to state 21
    identifier                     shift and go to state 13

state 18

    (10) feature -> identifier LPAREN . formals RPAREN COLON type LBRACE exp RBRACE
    (11) feature -> identifier LPAREN . RPAREN COLON type LBRACE exp RBRACE
    (14) formals -> . formal
    (15) formals -> . formal COMMA formals
    (16) formals -> .
    (17) formal -> . identifier COLON type
    (7) identifier -> . IDENTIFIER

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 24
    IDENTIFIER      shift and go to state 14

  ! RPAREN          [ reduce using rule 16 (formals -> .) ]

    identifier                     shift and go to state 22
    formals                        shift and go to state 23
    formal                         shift and go to state 25

state 19

    (12) feature -> identifier COLON . type
    (13) feature -> identifier COLON . type LARROW exp
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 26

state 20

    (5) class -> CLASS type INHERITS type LBRACE . featurelist RBRACE
    (8) featurelist -> .
    (9) featurelist -> . feature SEMI featurelist
    (10) feature -> . identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE
    (11) feature -> . identifier LPAREN RPAREN COLON type LBRACE exp RBRACE
    (12) feature -> . identifier COLON type
    (13) feature -> . identifier COLON type LARROW exp
    (7) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 8 (featurelist -> .)
    IDENTIFIER      shift and go to state 14

    featurelist                    shift and go to state 27
    feature                        shift and go to state 12
    identifier                     shift and go to state 13

state 21

    (9) featurelist -> feature SEMI featurelist .

    RBRACE          reduce using rule 9 (featurelist -> feature SEMI featurelist .)


state 22

    (17) formal -> identifier . COLON type

    COLON           shift and go to state 28


state 23

    (10) feature -> identifier LPAREN formals . RPAREN COLON type LBRACE exp RBRACE

    RPAREN          shift and go to state 29


state 24

    (11) feature -> identifier LPAREN RPAREN . COLON type LBRACE exp RBRACE

    COLON           shift and go to state 30


state 25

    (14) formals -> formal .
    (15) formals -> formal . COMMA formals

    RPAREN          reduce using rule 14 (formals -> formal .)
    COMMA           shift and go to state 31


state 26

    (12) feature -> identifier COLON type .
    (13) feature -> identifier COLON type . LARROW exp

    SEMI            reduce using rule 12 (feature -> identifier COLON type .)
    LARROW          shift and go to state 32


state 27

    (5) class -> CLASS type INHERITS type LBRACE featurelist . RBRACE

    RBRACE          shift and go to state 33


state 28

    (17) formal -> identifier COLON . type
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 34

state 29

    (10) feature -> identifier LPAREN formals RPAREN . COLON type LBRACE exp RBRACE

    COLON           shift and go to state 35


state 30

    (11) feature -> identifier LPAREN RPAREN COLON . type LBRACE exp RBRACE
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 36

state 31

    (15) formals -> formal COMMA . formals
    (14) formals -> . formal
    (15) formals -> . formal COMMA formals
    (16) formals -> .
    (17) formal -> . identifier COLON type
    (7) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 16 (formals -> .)
    IDENTIFIER      shift and go to state 14

    formal                         shift and go to state 25
    formals                        shift and go to state 37
    identifier                     shift and go to state 22

state 32

    (13) feature -> identifier COLON type LARROW . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 39

state 33

    (5) class -> CLASS type INHERITS type LBRACE featurelist RBRACE .

    SEMI            reduce using rule 5 (class -> CLASS type INHERITS type LBRACE featurelist RBRACE .)


state 34

    (17) formal -> identifier COLON type .

    COMMA           reduce using rule 17 (formal -> identifier COLON type .)
    RPAREN          reduce using rule 17 (formal -> identifier COLON type .)


state 35

    (10) feature -> identifier LPAREN formals RPAREN COLON . type LBRACE exp RBRACE
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 54

state 36

    (11) feature -> identifier LPAREN RPAREN COLON type . LBRACE exp RBRACE

    LBRACE          shift and go to state 55


state 37

    (15) formals -> formal COMMA formals .

    RPAREN          reduce using rule 15 (formals -> formal COMMA formals .)


state 38

    (34) exp -> identifier . LARROW exp
    (35) exp -> identifier . LPAREN exp_list RPAREN
    (36) exp -> identifier . LPAREN RPAREN
    (56) exp -> identifier .

    LARROW          shift and go to state 56
    LPAREN          shift and go to state 57
    PLUS            reduce using rule 56 (exp -> identifier .)
    MINUS           reduce using rule 56 (exp -> identifier .)
    TIMES           reduce using rule 56 (exp -> identifier .)
    DIVIDE          reduce using rule 56 (exp -> identifier .)
    LT              reduce using rule 56 (exp -> identifier .)
    LE              reduce using rule 56 (exp -> identifier .)
    EQUALS          reduce using rule 56 (exp -> identifier .)
    AT              reduce using rule 56 (exp -> identifier .)
    DOT             reduce using rule 56 (exp -> identifier .)
    SEMI            reduce using rule 56 (exp -> identifier .)
    RPAREN          reduce using rule 56 (exp -> identifier .)
    THEN            reduce using rule 56 (exp -> identifier .)
    LOOP            reduce using rule 56 (exp -> identifier .)
    OF              reduce using rule 56 (exp -> identifier .)
    RBRACE          reduce using rule 56 (exp -> identifier .)
    COMMA           reduce using rule 56 (exp -> identifier .)
    ELSE            reduce using rule 56 (exp -> identifier .)
    POOL            reduce using rule 56 (exp -> identifier .)
    FI              reduce using rule 56 (exp -> identifier .)
    IN              reduce using rule 56 (exp -> identifier .)


state 39

    (13) feature -> identifier COLON type LARROW exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    SEMI            reduce using rule 13 (feature -> identifier COLON type LARROW exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 40

    (22) exp -> TILDE . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 67
    identifier                     shift and go to state 38

state 41

    (26) exp -> NOT . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 68
    identifier                     shift and go to state 38

state 42

    (27) exp -> LPAREN . exp RPAREN
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 69
    identifier                     shift and go to state 38

state 43

    (28) exp -> INTEGER .

    PLUS            reduce using rule 28 (exp -> INTEGER .)
    MINUS           reduce using rule 28 (exp -> INTEGER .)
    TIMES           reduce using rule 28 (exp -> INTEGER .)
    DIVIDE          reduce using rule 28 (exp -> INTEGER .)
    LT              reduce using rule 28 (exp -> INTEGER .)
    LE              reduce using rule 28 (exp -> INTEGER .)
    EQUALS          reduce using rule 28 (exp -> INTEGER .)
    AT              reduce using rule 28 (exp -> INTEGER .)
    DOT             reduce using rule 28 (exp -> INTEGER .)
    SEMI            reduce using rule 28 (exp -> INTEGER .)
    RPAREN          reduce using rule 28 (exp -> INTEGER .)
    THEN            reduce using rule 28 (exp -> INTEGER .)
    LOOP            reduce using rule 28 (exp -> INTEGER .)
    OF              reduce using rule 28 (exp -> INTEGER .)
    RBRACE          reduce using rule 28 (exp -> INTEGER .)
    COMMA           reduce using rule 28 (exp -> INTEGER .)
    ELSE            reduce using rule 28 (exp -> INTEGER .)
    POOL            reduce using rule 28 (exp -> INTEGER .)
    FI              reduce using rule 28 (exp -> INTEGER .)
    IN              reduce using rule 28 (exp -> INTEGER .)


state 44

    (29) exp -> STRING .

    PLUS            reduce using rule 29 (exp -> STRING .)
    MINUS           reduce using rule 29 (exp -> STRING .)
    TIMES           reduce using rule 29 (exp -> STRING .)
    DIVIDE          reduce using rule 29 (exp -> STRING .)
    LT              reduce using rule 29 (exp -> STRING .)
    LE              reduce using rule 29 (exp -> STRING .)
    EQUALS          reduce using rule 29 (exp -> STRING .)
    AT              reduce using rule 29 (exp -> STRING .)
    DOT             reduce using rule 29 (exp -> STRING .)
    SEMI            reduce using rule 29 (exp -> STRING .)
    RPAREN          reduce using rule 29 (exp -> STRING .)
    THEN            reduce using rule 29 (exp -> STRING .)
    LOOP            reduce using rule 29 (exp -> STRING .)
    OF              reduce using rule 29 (exp -> STRING .)
    RBRACE          reduce using rule 29 (exp -> STRING .)
    COMMA           reduce using rule 29 (exp -> STRING .)
    ELSE            reduce using rule 29 (exp -> STRING .)
    POOL            reduce using rule 29 (exp -> STRING .)
    FI              reduce using rule 29 (exp -> STRING .)
    IN              reduce using rule 29 (exp -> STRING .)


state 45

    (30) exp -> TRUE .

    PLUS            reduce using rule 30 (exp -> TRUE .)
    MINUS           reduce using rule 30 (exp -> TRUE .)
    TIMES           reduce using rule 30 (exp -> TRUE .)
    DIVIDE          reduce using rule 30 (exp -> TRUE .)
    LT              reduce using rule 30 (exp -> TRUE .)
    LE              reduce using rule 30 (exp -> TRUE .)
    EQUALS          reduce using rule 30 (exp -> TRUE .)
    AT              reduce using rule 30 (exp -> TRUE .)
    DOT             reduce using rule 30 (exp -> TRUE .)
    SEMI            reduce using rule 30 (exp -> TRUE .)
    RPAREN          reduce using rule 30 (exp -> TRUE .)
    THEN            reduce using rule 30 (exp -> TRUE .)
    LOOP            reduce using rule 30 (exp -> TRUE .)
    OF              reduce using rule 30 (exp -> TRUE .)
    RBRACE          reduce using rule 30 (exp -> TRUE .)
    COMMA           reduce using rule 30 (exp -> TRUE .)
    ELSE            reduce using rule 30 (exp -> TRUE .)
    POOL            reduce using rule 30 (exp -> TRUE .)
    FI              reduce using rule 30 (exp -> TRUE .)
    IN              reduce using rule 30 (exp -> TRUE .)


state 46

    (31) exp -> FALSE .

    PLUS            reduce using rule 31 (exp -> FALSE .)
    MINUS           reduce using rule 31 (exp -> FALSE .)
    TIMES           reduce using rule 31 (exp -> FALSE .)
    DIVIDE          reduce using rule 31 (exp -> FALSE .)
    LT              reduce using rule 31 (exp -> FALSE .)
    LE              reduce using rule 31 (exp -> FALSE .)
    EQUALS          reduce using rule 31 (exp -> FALSE .)
    AT              reduce using rule 31 (exp -> FALSE .)
    DOT             reduce using rule 31 (exp -> FALSE .)
    SEMI            reduce using rule 31 (exp -> FALSE .)
    RPAREN          reduce using rule 31 (exp -> FALSE .)
    THEN            reduce using rule 31 (exp -> FALSE .)
    LOOP            reduce using rule 31 (exp -> FALSE .)
    OF              reduce using rule 31 (exp -> FALSE .)
    RBRACE          reduce using rule 31 (exp -> FALSE .)
    COMMA           reduce using rule 31 (exp -> FALSE .)
    ELSE            reduce using rule 31 (exp -> FALSE .)
    POOL            reduce using rule 31 (exp -> FALSE .)
    FI              reduce using rule 31 (exp -> FALSE .)
    IN              reduce using rule 31 (exp -> FALSE .)


state 47

    (32) exp -> ISVOID . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 70
    identifier                     shift and go to state 38

state 48

    (33) exp -> NEW . type
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 71

state 49

    (41) exp -> IF . exp THEN exp ELSE exp FI
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 72
    identifier                     shift and go to state 38

state 50

    (42) exp -> WHILE . exp LOOP exp POOL
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 73
    identifier                     shift and go to state 38

state 51

    (43) exp -> LBRACE . exp_list_semi RBRACE
    (54) exp_list_semi -> . exp SEMI
    (55) exp_list_semi -> . exp SEMI exp_list_semi
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp_list_semi                  shift and go to state 74
    exp                            shift and go to state 75
    identifier                     shift and go to state 38

state 52

    (44) exp -> LET . let_list IN exp
    (45) let_list -> . identifier COLON type
    (46) let_list -> . identifier COLON type LARROW exp
    (47) let_list -> . identifier COLON type COMMA let_list
    (48) let_list -> . identifier COLON type LARROW exp COMMA let_list
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    let_list                       shift and go to state 76
    identifier                     shift and go to state 77

state 53

    (49) exp -> CASE . exp OF case_list ESAC
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 78
    identifier                     shift and go to state 38

state 54

    (10) feature -> identifier LPAREN formals RPAREN COLON type . LBRACE exp RBRACE

    LBRACE          shift and go to state 79


state 55

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE . exp RBRACE
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 80

state 56

    (34) exp -> identifier LARROW . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 81

state 57

    (35) exp -> identifier LPAREN . exp_list RPAREN
    (36) exp -> identifier LPAREN . RPAREN
    (52) exp_list -> . exp
    (53) exp_list -> . exp COMMA exp_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    RPAREN          shift and go to state 83
    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp_list                       shift and go to state 82
    exp                            shift and go to state 84

state 58

    (18) exp -> exp PLUS . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 85
    identifier                     shift and go to state 38

state 59

    (19) exp -> exp MINUS . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 86
    identifier                     shift and go to state 38

state 60

    (20) exp -> exp TIMES . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 87
    identifier                     shift and go to state 38

state 61

    (21) exp -> exp DIVIDE . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 88
    identifier                     shift and go to state 38

state 62

    (23) exp -> exp LT . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 89
    identifier                     shift and go to state 38

state 63

    (24) exp -> exp LE . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 90
    identifier                     shift and go to state 38

state 64

    (25) exp -> exp EQUALS . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 91
    identifier                     shift and go to state 38

state 65

    (37) exp -> exp AT . type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp AT . type DOT identifier LPAREN RPAREN
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 92

state 66

    (39) exp -> exp DOT . identifier LPAREN exp_list RPAREN
    (40) exp -> exp DOT . identifier LPAREN RPAREN
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 93

state 67

    (22) exp -> TILDE exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 22 (exp -> TILDE exp .)
    MINUS           reduce using rule 22 (exp -> TILDE exp .)
    TIMES           reduce using rule 22 (exp -> TILDE exp .)
    DIVIDE          reduce using rule 22 (exp -> TILDE exp .)
    LT              reduce using rule 22 (exp -> TILDE exp .)
    LE              reduce using rule 22 (exp -> TILDE exp .)
    EQUALS          reduce using rule 22 (exp -> TILDE exp .)
    SEMI            reduce using rule 22 (exp -> TILDE exp .)
    RPAREN          reduce using rule 22 (exp -> TILDE exp .)
    THEN            reduce using rule 22 (exp -> TILDE exp .)
    LOOP            reduce using rule 22 (exp -> TILDE exp .)
    OF              reduce using rule 22 (exp -> TILDE exp .)
    RBRACE          reduce using rule 22 (exp -> TILDE exp .)
    COMMA           reduce using rule 22 (exp -> TILDE exp .)
    ELSE            reduce using rule 22 (exp -> TILDE exp .)
    POOL            reduce using rule 22 (exp -> TILDE exp .)
    FI              reduce using rule 22 (exp -> TILDE exp .)
    IN              reduce using rule 22 (exp -> TILDE exp .)
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! AT              [ reduce using rule 22 (exp -> TILDE exp .) ]
  ! DOT             [ reduce using rule 22 (exp -> TILDE exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 68

    (26) exp -> NOT exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    SEMI            reduce using rule 26 (exp -> NOT exp .)
    RPAREN          reduce using rule 26 (exp -> NOT exp .)
    THEN            reduce using rule 26 (exp -> NOT exp .)
    LOOP            reduce using rule 26 (exp -> NOT exp .)
    OF              reduce using rule 26 (exp -> NOT exp .)
    RBRACE          reduce using rule 26 (exp -> NOT exp .)
    COMMA           reduce using rule 26 (exp -> NOT exp .)
    ELSE            reduce using rule 26 (exp -> NOT exp .)
    POOL            reduce using rule 26 (exp -> NOT exp .)
    FI              reduce using rule 26 (exp -> NOT exp .)
    IN              reduce using rule 26 (exp -> NOT exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 26 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> NOT exp .) ]
  ! TIMES           [ reduce using rule 26 (exp -> NOT exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 26 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 26 (exp -> NOT exp .) ]
  ! EQUALS          [ reduce using rule 26 (exp -> NOT exp .) ]
  ! AT              [ reduce using rule 26 (exp -> NOT exp .) ]
  ! DOT             [ reduce using rule 26 (exp -> NOT exp .) ]


state 69

    (27) exp -> LPAREN exp . RPAREN
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    RPAREN          shift and go to state 94
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 70

    (32) exp -> ISVOID exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 32 (exp -> ISVOID exp .)
    MINUS           reduce using rule 32 (exp -> ISVOID exp .)
    TIMES           reduce using rule 32 (exp -> ISVOID exp .)
    DIVIDE          reduce using rule 32 (exp -> ISVOID exp .)
    LT              reduce using rule 32 (exp -> ISVOID exp .)
    LE              reduce using rule 32 (exp -> ISVOID exp .)
    EQUALS          reduce using rule 32 (exp -> ISVOID exp .)
    SEMI            reduce using rule 32 (exp -> ISVOID exp .)
    RPAREN          reduce using rule 32 (exp -> ISVOID exp .)
    THEN            reduce using rule 32 (exp -> ISVOID exp .)
    LOOP            reduce using rule 32 (exp -> ISVOID exp .)
    OF              reduce using rule 32 (exp -> ISVOID exp .)
    RBRACE          reduce using rule 32 (exp -> ISVOID exp .)
    COMMA           reduce using rule 32 (exp -> ISVOID exp .)
    ELSE            reduce using rule 32 (exp -> ISVOID exp .)
    POOL            reduce using rule 32 (exp -> ISVOID exp .)
    FI              reduce using rule 32 (exp -> ISVOID exp .)
    IN              reduce using rule 32 (exp -> ISVOID exp .)
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! AT              [ reduce using rule 32 (exp -> ISVOID exp .) ]
  ! DOT             [ reduce using rule 32 (exp -> ISVOID exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 71

    (33) exp -> NEW type .

    PLUS            reduce using rule 33 (exp -> NEW type .)
    MINUS           reduce using rule 33 (exp -> NEW type .)
    TIMES           reduce using rule 33 (exp -> NEW type .)
    DIVIDE          reduce using rule 33 (exp -> NEW type .)
    LT              reduce using rule 33 (exp -> NEW type .)
    LE              reduce using rule 33 (exp -> NEW type .)
    EQUALS          reduce using rule 33 (exp -> NEW type .)
    AT              reduce using rule 33 (exp -> NEW type .)
    DOT             reduce using rule 33 (exp -> NEW type .)
    SEMI            reduce using rule 33 (exp -> NEW type .)
    RPAREN          reduce using rule 33 (exp -> NEW type .)
    THEN            reduce using rule 33 (exp -> NEW type .)
    LOOP            reduce using rule 33 (exp -> NEW type .)
    OF              reduce using rule 33 (exp -> NEW type .)
    RBRACE          reduce using rule 33 (exp -> NEW type .)
    COMMA           reduce using rule 33 (exp -> NEW type .)
    ELSE            reduce using rule 33 (exp -> NEW type .)
    POOL            reduce using rule 33 (exp -> NEW type .)
    FI              reduce using rule 33 (exp -> NEW type .)
    IN              reduce using rule 33 (exp -> NEW type .)


state 72

    (41) exp -> IF exp . THEN exp ELSE exp FI
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    THEN            shift and go to state 95
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 73

    (42) exp -> WHILE exp . LOOP exp POOL
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    LOOP            shift and go to state 96
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 74

    (43) exp -> LBRACE exp_list_semi . RBRACE

    RBRACE          shift and go to state 97


state 75

    (54) exp_list_semi -> exp . SEMI
    (55) exp_list_semi -> exp . SEMI exp_list_semi
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    SEMI            shift and go to state 98
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 76

    (44) exp -> LET let_list . IN exp

    IN              shift and go to state 99


state 77

    (45) let_list -> identifier . COLON type
    (46) let_list -> identifier . COLON type LARROW exp
    (47) let_list -> identifier . COLON type COMMA let_list
    (48) let_list -> identifier . COLON type LARROW exp COMMA let_list

    COLON           shift and go to state 100


state 78

    (49) exp -> CASE exp . OF case_list ESAC
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    OF              shift and go to state 101
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 79

    (10) feature -> identifier LPAREN formals RPAREN COLON type LBRACE . exp RBRACE
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 102

state 80

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE exp . RBRACE
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    RBRACE          shift and go to state 103
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 81

    (34) exp -> identifier LARROW exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    SEMI            reduce using rule 34 (exp -> identifier LARROW exp .)
    RPAREN          reduce using rule 34 (exp -> identifier LARROW exp .)
    THEN            reduce using rule 34 (exp -> identifier LARROW exp .)
    LOOP            reduce using rule 34 (exp -> identifier LARROW exp .)
    OF              reduce using rule 34 (exp -> identifier LARROW exp .)
    RBRACE          reduce using rule 34 (exp -> identifier LARROW exp .)
    COMMA           reduce using rule 34 (exp -> identifier LARROW exp .)
    ELSE            reduce using rule 34 (exp -> identifier LARROW exp .)
    POOL            reduce using rule 34 (exp -> identifier LARROW exp .)
    FI              reduce using rule 34 (exp -> identifier LARROW exp .)
    IN              reduce using rule 34 (exp -> identifier LARROW exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! TIMES           [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! DIVIDE          [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! LT              [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! LE              [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! EQUALS          [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! AT              [ reduce using rule 34 (exp -> identifier LARROW exp .) ]
  ! DOT             [ reduce using rule 34 (exp -> identifier LARROW exp .) ]


state 82

    (35) exp -> identifier LPAREN exp_list . RPAREN

    RPAREN          shift and go to state 104


state 83

    (36) exp -> identifier LPAREN RPAREN .

    PLUS            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    LT              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    LE              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    EQUALS          reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    AT              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    DOT             reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    LOOP            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    OF              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    RBRACE          reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    POOL            reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    FI              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)
    IN              reduce using rule 36 (exp -> identifier LPAREN RPAREN .)


state 84

    (52) exp_list -> exp .
    (53) exp_list -> exp . COMMA exp_list
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    RPAREN          reduce using rule 52 (exp_list -> exp .)
    COMMA           shift and go to state 105
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 85

    (18) exp -> exp PLUS exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 18 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 18 (exp -> exp PLUS exp .)
    LT              reduce using rule 18 (exp -> exp PLUS exp .)
    LE              reduce using rule 18 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 18 (exp -> exp PLUS exp .)
    SEMI            reduce using rule 18 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 18 (exp -> exp PLUS exp .)
    THEN            reduce using rule 18 (exp -> exp PLUS exp .)
    LOOP            reduce using rule 18 (exp -> exp PLUS exp .)
    OF              reduce using rule 18 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 18 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 18 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 18 (exp -> exp PLUS exp .)
    POOL            reduce using rule 18 (exp -> exp PLUS exp .)
    FI              reduce using rule 18 (exp -> exp PLUS exp .)
    IN              reduce using rule 18 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! TIMES           [ reduce using rule 18 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp PLUS exp .) ]
  ! AT              [ reduce using rule 18 (exp -> exp PLUS exp .) ]
  ! DOT             [ reduce using rule 18 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 86

    (19) exp -> exp MINUS exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 19 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 19 (exp -> exp MINUS exp .)
    LT              reduce using rule 19 (exp -> exp MINUS exp .)
    LE              reduce using rule 19 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 19 (exp -> exp MINUS exp .)
    SEMI            reduce using rule 19 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 19 (exp -> exp MINUS exp .)
    THEN            reduce using rule 19 (exp -> exp MINUS exp .)
    LOOP            reduce using rule 19 (exp -> exp MINUS exp .)
    OF              reduce using rule 19 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 19 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 19 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 19 (exp -> exp MINUS exp .)
    POOL            reduce using rule 19 (exp -> exp MINUS exp .)
    FI              reduce using rule 19 (exp -> exp MINUS exp .)
    IN              reduce using rule 19 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! TIMES           [ reduce using rule 19 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp MINUS exp .) ]
  ! AT              [ reduce using rule 19 (exp -> exp MINUS exp .) ]
  ! DOT             [ reduce using rule 19 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 87

    (20) exp -> exp TIMES exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 20 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 20 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 20 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 20 (exp -> exp TIMES exp .)
    LT              reduce using rule 20 (exp -> exp TIMES exp .)
    LE              reduce using rule 20 (exp -> exp TIMES exp .)
    EQUALS          reduce using rule 20 (exp -> exp TIMES exp .)
    SEMI            reduce using rule 20 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 20 (exp -> exp TIMES exp .)
    THEN            reduce using rule 20 (exp -> exp TIMES exp .)
    LOOP            reduce using rule 20 (exp -> exp TIMES exp .)
    OF              reduce using rule 20 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 20 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 20 (exp -> exp TIMES exp .)
    ELSE            reduce using rule 20 (exp -> exp TIMES exp .)
    POOL            reduce using rule 20 (exp -> exp TIMES exp .)
    FI              reduce using rule 20 (exp -> exp TIMES exp .)
    IN              reduce using rule 20 (exp -> exp TIMES exp .)
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! AT              [ reduce using rule 20 (exp -> exp TIMES exp .) ]
  ! DOT             [ reduce using rule 20 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 88

    (21) exp -> exp DIVIDE exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    PLUS            reduce using rule 21 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 21 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 21 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 21 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 21 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 21 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 21 (exp -> exp DIVIDE exp .)
    SEMI            reduce using rule 21 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 21 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 21 (exp -> exp DIVIDE exp .)
    LOOP            reduce using rule 21 (exp -> exp DIVIDE exp .)
    OF              reduce using rule 21 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 21 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 21 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 21 (exp -> exp DIVIDE exp .)
    POOL            reduce using rule 21 (exp -> exp DIVIDE exp .)
    FI              reduce using rule 21 (exp -> exp DIVIDE exp .)
    IN              reduce using rule 21 (exp -> exp DIVIDE exp .)
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! AT              [ reduce using rule 21 (exp -> exp DIVIDE exp .) ]
  ! DOT             [ reduce using rule 21 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIVIDE          [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 89

    (23) exp -> exp LT exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    LT              reduce using rule 23 (exp -> exp LT exp .)
    EQUALS          reduce using rule 23 (exp -> exp LT exp .)
    SEMI            reduce using rule 23 (exp -> exp LT exp .)
    RPAREN          reduce using rule 23 (exp -> exp LT exp .)
    THEN            reduce using rule 23 (exp -> exp LT exp .)
    LOOP            reduce using rule 23 (exp -> exp LT exp .)
    OF              reduce using rule 23 (exp -> exp LT exp .)
    RBRACE          reduce using rule 23 (exp -> exp LT exp .)
    COMMA           reduce using rule 23 (exp -> exp LT exp .)
    ELSE            reduce using rule 23 (exp -> exp LT exp .)
    POOL            reduce using rule 23 (exp -> exp LT exp .)
    FI              reduce using rule 23 (exp -> exp LT exp .)
    IN              reduce using rule 23 (exp -> exp LT exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LE              shift and go to state 63
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! LE              [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! AT              [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! DOT             [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 62 ]
  ! EQUALS          [ shift and go to state 64 ]


state 90

    (24) exp -> exp LE exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    LT              reduce using rule 24 (exp -> exp LE exp .)
    LE              reduce using rule 24 (exp -> exp LE exp .)
    EQUALS          reduce using rule 24 (exp -> exp LE exp .)
    SEMI            reduce using rule 24 (exp -> exp LE exp .)
    RPAREN          reduce using rule 24 (exp -> exp LE exp .)
    THEN            reduce using rule 24 (exp -> exp LE exp .)
    LOOP            reduce using rule 24 (exp -> exp LE exp .)
    OF              reduce using rule 24 (exp -> exp LE exp .)
    RBRACE          reduce using rule 24 (exp -> exp LE exp .)
    COMMA           reduce using rule 24 (exp -> exp LE exp .)
    ELSE            reduce using rule 24 (exp -> exp LE exp .)
    POOL            reduce using rule 24 (exp -> exp LE exp .)
    FI              reduce using rule 24 (exp -> exp LE exp .)
    IN              reduce using rule 24 (exp -> exp LE exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! AT              [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! DOT             [ reduce using rule 24 (exp -> exp LE exp .) ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 63 ]
  ! EQUALS          [ shift and go to state 64 ]


state 91

    (25) exp -> exp EQUALS exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    EQUALS          reduce using rule 25 (exp -> exp EQUALS exp .)
    SEMI            reduce using rule 25 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 25 (exp -> exp EQUALS exp .)
    THEN            reduce using rule 25 (exp -> exp EQUALS exp .)
    LOOP            reduce using rule 25 (exp -> exp EQUALS exp .)
    OF              reduce using rule 25 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 25 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 25 (exp -> exp EQUALS exp .)
    ELSE            reduce using rule 25 (exp -> exp EQUALS exp .)
    POOL            reduce using rule 25 (exp -> exp EQUALS exp .)
    FI              reduce using rule 25 (exp -> exp EQUALS exp .)
    IN              reduce using rule 25 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! TIMES           [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! LT              [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! LE              [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! AT              [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! DOT             [ reduce using rule 25 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ shift and go to state 64 ]


state 92

    (37) exp -> exp AT type . DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp AT type . DOT identifier LPAREN RPAREN

    DOT             shift and go to state 106


state 93

    (39) exp -> exp DOT identifier . LPAREN exp_list RPAREN
    (40) exp -> exp DOT identifier . LPAREN RPAREN

    LPAREN          shift and go to state 107


state 94

    (27) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    AT              reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    SEMI            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    LOOP            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    OF              reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    POOL            reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    FI              reduce using rule 27 (exp -> LPAREN exp RPAREN .)
    IN              reduce using rule 27 (exp -> LPAREN exp RPAREN .)


state 95

    (41) exp -> IF exp THEN . exp ELSE exp FI
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 108
    identifier                     shift and go to state 38

state 96

    (42) exp -> WHILE exp LOOP . exp POOL
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 109
    identifier                     shift and go to state 38

state 97

    (43) exp -> LBRACE exp_list_semi RBRACE .

    PLUS            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    MINUS           reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    TIMES           reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    DIVIDE          reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    LT              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    LE              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    EQUALS          reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    AT              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    DOT             reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    SEMI            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    RPAREN          reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    THEN            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    LOOP            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    OF              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    RBRACE          reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    COMMA           reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    ELSE            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    POOL            reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    FI              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)
    IN              reduce using rule 43 (exp -> LBRACE exp_list_semi RBRACE .)


state 98

    (54) exp_list_semi -> exp SEMI .
    (55) exp_list_semi -> exp SEMI . exp_list_semi
    (54) exp_list_semi -> . exp SEMI
    (55) exp_list_semi -> . exp SEMI exp_list_semi
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    RBRACE          reduce using rule 54 (exp_list_semi -> exp SEMI .)
    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 75
    exp_list_semi                  shift and go to state 110
    identifier                     shift and go to state 38

state 99

    (44) exp -> LET let_list IN . exp
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 111
    identifier                     shift and go to state 38

state 100

    (45) let_list -> identifier COLON . type
    (46) let_list -> identifier COLON . type LARROW exp
    (47) let_list -> identifier COLON . type COMMA let_list
    (48) let_list -> identifier COLON . type LARROW exp COMMA let_list
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 112

state 101

    (49) exp -> CASE exp OF . case_list ESAC
    (50) case_list -> . identifier COLON type RARROW exp SEMI
    (51) case_list -> . identifier COLON type RARROW exp SEMI case_list
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    case_list                      shift and go to state 113
    identifier                     shift and go to state 114

state 102

    (10) feature -> identifier LPAREN formals RPAREN COLON type LBRACE exp . RBRACE
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    RBRACE          shift and go to state 115
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 103

    (11) feature -> identifier LPAREN RPAREN COLON type LBRACE exp RBRACE .

    SEMI            reduce using rule 11 (feature -> identifier LPAREN RPAREN COLON type LBRACE exp RBRACE .)


state 104

    (35) exp -> identifier LPAREN exp_list RPAREN .

    PLUS            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    MINUS           reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    TIMES           reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    DIVIDE          reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    LT              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    LE              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    EQUALS          reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    AT              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    DOT             reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    SEMI            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    RPAREN          reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    THEN            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    LOOP            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    OF              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    RBRACE          reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    COMMA           reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    ELSE            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    POOL            reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    FI              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)
    IN              reduce using rule 35 (exp -> identifier LPAREN exp_list RPAREN .)


state 105

    (53) exp_list -> exp COMMA . exp_list
    (52) exp_list -> . exp
    (53) exp_list -> . exp COMMA exp_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 84
    exp_list                       shift and go to state 116
    identifier                     shift and go to state 38

state 106

    (37) exp -> exp AT type DOT . identifier LPAREN exp_list RPAREN
    (38) exp -> exp AT type DOT . identifier LPAREN RPAREN
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 117

state 107

    (39) exp -> exp DOT identifier LPAREN . exp_list RPAREN
    (40) exp -> exp DOT identifier LPAREN . RPAREN
    (52) exp_list -> . exp
    (53) exp_list -> . exp COMMA exp_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    RPAREN          shift and go to state 119
    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 84
    identifier                     shift and go to state 38
    exp_list                       shift and go to state 118

state 108

    (41) exp -> IF exp THEN exp . ELSE exp FI
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    ELSE            shift and go to state 120
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 109

    (42) exp -> WHILE exp LOOP exp . POOL
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    POOL            shift and go to state 121
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 110

    (55) exp_list_semi -> exp SEMI exp_list_semi .

    RBRACE          reduce using rule 55 (exp_list_semi -> exp SEMI exp_list_semi .)


state 111

    (44) exp -> LET let_list IN exp .
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMI            reduce using rule 44 (exp -> LET let_list IN exp .)
    RPAREN          reduce using rule 44 (exp -> LET let_list IN exp .)
    THEN            reduce using rule 44 (exp -> LET let_list IN exp .)
    LOOP            reduce using rule 44 (exp -> LET let_list IN exp .)
    OF              reduce using rule 44 (exp -> LET let_list IN exp .)
    RBRACE          reduce using rule 44 (exp -> LET let_list IN exp .)
    COMMA           reduce using rule 44 (exp -> LET let_list IN exp .)
    ELSE            reduce using rule 44 (exp -> LET let_list IN exp .)
    POOL            reduce using rule 44 (exp -> LET let_list IN exp .)
    FI              reduce using rule 44 (exp -> LET let_list IN exp .)
    IN              reduce using rule 44 (exp -> LET let_list IN exp .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66

  ! PLUS            [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! MINUS           [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! TIMES           [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! DIVIDE          [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! LT              [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! LE              [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! EQUALS          [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! AT              [ reduce using rule 44 (exp -> LET let_list IN exp .) ]
  ! DOT             [ reduce using rule 44 (exp -> LET let_list IN exp .) ]


state 112

    (45) let_list -> identifier COLON type .
    (46) let_list -> identifier COLON type . LARROW exp
    (47) let_list -> identifier COLON type . COMMA let_list
    (48) let_list -> identifier COLON type . LARROW exp COMMA let_list

    IN              reduce using rule 45 (let_list -> identifier COLON type .)
    LARROW          shift and go to state 122
    COMMA           shift and go to state 123


state 113

    (49) exp -> CASE exp OF case_list . ESAC

    ESAC            shift and go to state 124


state 114

    (50) case_list -> identifier . COLON type RARROW exp SEMI
    (51) case_list -> identifier . COLON type RARROW exp SEMI case_list

    COLON           shift and go to state 125


state 115

    (10) feature -> identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE .

    SEMI            reduce using rule 10 (feature -> identifier LPAREN formals RPAREN COLON type LBRACE exp RBRACE .)


state 116

    (53) exp_list -> exp COMMA exp_list .

    RPAREN          reduce using rule 53 (exp_list -> exp COMMA exp_list .)


state 117

    (37) exp -> exp AT type DOT identifier . LPAREN exp_list RPAREN
    (38) exp -> exp AT type DOT identifier . LPAREN RPAREN

    LPAREN          shift and go to state 126


state 118

    (39) exp -> exp DOT identifier LPAREN exp_list . RPAREN

    RPAREN          shift and go to state 127


state 119

    (40) exp -> exp DOT identifier LPAREN RPAREN .

    PLUS            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    MINUS           reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    TIMES           reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    LT              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    LE              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    EQUALS          reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    AT              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    DOT             reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    SEMI            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    THEN            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    LOOP            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    OF              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    RBRACE          reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    COMMA           reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    ELSE            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    POOL            reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    FI              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)
    IN              reduce using rule 40 (exp -> exp DOT identifier LPAREN RPAREN .)


state 120

    (41) exp -> IF exp THEN exp ELSE . exp FI
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 128
    identifier                     shift and go to state 38

state 121

    (42) exp -> WHILE exp LOOP exp POOL .

    PLUS            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    MINUS           reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    TIMES           reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    DIVIDE          reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    LT              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    LE              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    EQUALS          reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    AT              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    DOT             reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    SEMI            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    RPAREN          reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    THEN            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    LOOP            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    OF              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    RBRACE          reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    COMMA           reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    ELSE            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    POOL            reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    FI              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)
    IN              reduce using rule 42 (exp -> WHILE exp LOOP exp POOL .)


state 122

    (46) let_list -> identifier COLON type LARROW . exp
    (48) let_list -> identifier COLON type LARROW . exp COMMA let_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 129

state 123

    (47) let_list -> identifier COLON type COMMA . let_list
    (45) let_list -> . identifier COLON type
    (46) let_list -> . identifier COLON type LARROW exp
    (47) let_list -> . identifier COLON type COMMA let_list
    (48) let_list -> . identifier COLON type LARROW exp COMMA let_list
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 77
    let_list                       shift and go to state 130

state 124

    (49) exp -> CASE exp OF case_list ESAC .

    PLUS            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    MINUS           reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    TIMES           reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    DIVIDE          reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    LT              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    LE              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    EQUALS          reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    AT              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    DOT             reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    SEMI            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    RPAREN          reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    THEN            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    LOOP            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    OF              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    RBRACE          reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    COMMA           reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    ELSE            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    POOL            reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    FI              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)
    IN              reduce using rule 49 (exp -> CASE exp OF case_list ESAC .)


state 125

    (50) case_list -> identifier COLON . type RARROW exp SEMI
    (51) case_list -> identifier COLON . type RARROW exp SEMI case_list
    (6) type -> . TYPE

    TYPE            shift and go to state 7

    type                           shift and go to state 131

state 126

    (37) exp -> exp AT type DOT identifier LPAREN . exp_list RPAREN
    (38) exp -> exp AT type DOT identifier LPAREN . RPAREN
    (52) exp_list -> . exp
    (53) exp_list -> . exp COMMA exp_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    RPAREN          shift and go to state 133
    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 84
    identifier                     shift and go to state 38
    exp_list                       shift and go to state 132

state 127

    (39) exp -> exp DOT identifier LPAREN exp_list RPAREN .

    PLUS            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    MINUS           reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    TIMES           reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    DIVIDE          reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    LT              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    LE              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    EQUALS          reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    AT              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    DOT             reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    SEMI            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    RPAREN          reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    THEN            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    LOOP            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    OF              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    RBRACE          reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    COMMA           reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    ELSE            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    POOL            reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    FI              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)
    IN              reduce using rule 39 (exp -> exp DOT identifier LPAREN exp_list RPAREN .)


state 128

    (41) exp -> IF exp THEN exp ELSE exp . FI
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    FI              shift and go to state 134
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 129

    (46) let_list -> identifier COLON type LARROW exp .
    (48) let_list -> identifier COLON type LARROW exp . COMMA let_list
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    IN              reduce using rule 46 (let_list -> identifier COLON type LARROW exp .)
    COMMA           shift and go to state 135
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 130

    (47) let_list -> identifier COLON type COMMA let_list .

    IN              reduce using rule 47 (let_list -> identifier COLON type COMMA let_list .)


state 131

    (50) case_list -> identifier COLON type . RARROW exp SEMI
    (51) case_list -> identifier COLON type . RARROW exp SEMI case_list

    RARROW          shift and go to state 136


state 132

    (37) exp -> exp AT type DOT identifier LPAREN exp_list . RPAREN

    RPAREN          shift and go to state 137


state 133

    (38) exp -> exp AT type DOT identifier LPAREN RPAREN .

    PLUS            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    MINUS           reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    TIMES           reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    LT              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    LE              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    EQUALS          reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    AT              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    DOT             reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    SEMI            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    THEN            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    LOOP            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    OF              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    RBRACE          reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    COMMA           reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    ELSE            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    POOL            reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    FI              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)
    IN              reduce using rule 38 (exp -> exp AT type DOT identifier LPAREN RPAREN .)


state 134

    (41) exp -> IF exp THEN exp ELSE exp FI .

    PLUS            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    MINUS           reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    TIMES           reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    DIVIDE          reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    LT              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    LE              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    EQUALS          reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    AT              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    DOT             reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    SEMI            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    RPAREN          reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    THEN            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    LOOP            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    OF              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    RBRACE          reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    COMMA           reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    ELSE            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    POOL            reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    FI              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)
    IN              reduce using rule 41 (exp -> IF exp THEN exp ELSE exp FI .)


state 135

    (48) let_list -> identifier COLON type LARROW exp COMMA . let_list
    (45) let_list -> . identifier COLON type
    (46) let_list -> . identifier COLON type LARROW exp
    (47) let_list -> . identifier COLON type COMMA let_list
    (48) let_list -> . identifier COLON type LARROW exp COMMA let_list
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 77
    let_list                       shift and go to state 138

state 136

    (50) case_list -> identifier COLON type RARROW . exp SEMI
    (51) case_list -> identifier COLON type RARROW . exp SEMI case_list
    (18) exp -> . exp PLUS exp
    (19) exp -> . exp MINUS exp
    (20) exp -> . exp TIMES exp
    (21) exp -> . exp DIVIDE exp
    (22) exp -> . TILDE exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp LE exp
    (25) exp -> . exp EQUALS exp
    (26) exp -> . NOT exp
    (27) exp -> . LPAREN exp RPAREN
    (28) exp -> . INTEGER
    (29) exp -> . STRING
    (30) exp -> . TRUE
    (31) exp -> . FALSE
    (32) exp -> . ISVOID exp
    (33) exp -> . NEW type
    (34) exp -> . identifier LARROW exp
    (35) exp -> . identifier LPAREN exp_list RPAREN
    (36) exp -> . identifier LPAREN RPAREN
    (37) exp -> . exp AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> . exp AT type DOT identifier LPAREN RPAREN
    (39) exp -> . exp DOT identifier LPAREN exp_list RPAREN
    (40) exp -> . exp DOT identifier LPAREN RPAREN
    (41) exp -> . IF exp THEN exp ELSE exp FI
    (42) exp -> . WHILE exp LOOP exp POOL
    (43) exp -> . LBRACE exp_list_semi RBRACE
    (44) exp -> . LET let_list IN exp
    (49) exp -> . CASE exp OF case_list ESAC
    (56) exp -> . identifier
    (7) identifier -> . IDENTIFIER

    TILDE           shift and go to state 40
    NOT             shift and go to state 41
    LPAREN          shift and go to state 42
    INTEGER         shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    LBRACE          shift and go to state 51
    LET             shift and go to state 52
    CASE            shift and go to state 53
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 38
    exp                            shift and go to state 139

state 137

    (37) exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .

    PLUS            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    MINUS           reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    TIMES           reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    DIVIDE          reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    LT              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    LE              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    EQUALS          reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    AT              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    DOT             reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    SEMI            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    RPAREN          reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    THEN            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    LOOP            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    OF              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    RBRACE          reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    COMMA           reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    ELSE            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    POOL            reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    FI              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)
    IN              reduce using rule 37 (exp -> exp AT type DOT identifier LPAREN exp_list RPAREN .)


state 138

    (48) let_list -> identifier COLON type LARROW exp COMMA let_list .

    IN              reduce using rule 48 (let_list -> identifier COLON type LARROW exp COMMA let_list .)


state 139

    (50) case_list -> identifier COLON type RARROW exp . SEMI
    (51) case_list -> identifier COLON type RARROW exp . SEMI case_list
    (18) exp -> exp . PLUS exp
    (19) exp -> exp . MINUS exp
    (20) exp -> exp . TIMES exp
    (21) exp -> exp . DIVIDE exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . LE exp
    (25) exp -> exp . EQUALS exp
    (37) exp -> exp . AT type DOT identifier LPAREN exp_list RPAREN
    (38) exp -> exp . AT type DOT identifier LPAREN RPAREN
    (39) exp -> exp . DOT identifier LPAREN exp_list RPAREN
    (40) exp -> exp . DOT identifier LPAREN RPAREN

    SEMI            shift and go to state 140
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIVIDE          shift and go to state 61
    LT              shift and go to state 62
    LE              shift and go to state 63
    EQUALS          shift and go to state 64
    AT              shift and go to state 65
    DOT             shift and go to state 66


state 140

    (50) case_list -> identifier COLON type RARROW exp SEMI .
    (51) case_list -> identifier COLON type RARROW exp SEMI . case_list
    (50) case_list -> . identifier COLON type RARROW exp SEMI
    (51) case_list -> . identifier COLON type RARROW exp SEMI case_list
    (7) identifier -> . IDENTIFIER

    ESAC            reduce using rule 50 (case_list -> identifier COLON type RARROW exp SEMI .)
    IDENTIFIER      shift and go to state 14

    identifier                     shift and go to state 114
    case_list                      shift and go to state 141

state 141

    (51) case_list -> identifier COLON type RARROW exp SEMI case_list .

    ESAC            reduce using rule 51 (case_list -> identifier COLON type RARROW exp SEMI case_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for LE in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 111 resolved as shift
WARNING: shift/reduce conflict for AT in state 111 resolved as shift
WARNING: shift/reduce conflict for DOT in state 111 resolved as shift
